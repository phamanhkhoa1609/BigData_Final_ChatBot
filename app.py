import streamlit as st
import requests
import re
from datetime import datetime
import calendar
import unicodedata

# Thi·∫øt l·∫≠p ti√™u ƒë·ªÅ v√† m√¥ t·∫£
st.set_page_config(page_title="Chatbot S·ª©c Kh·ªèe RƒÉng Mi·ªáng", page_icon="ü¶∑", layout="wide")
st.title("Chatbot S·ª©c Kh·ªèe RƒÉng Mi·ªáng ü¶∑")
st.markdown("""
H·ªèi v·ªÅ s·ª©c kh·ªèe rƒÉng mi·ªáng, t√¥i s·∫Ω tr·∫£ l·ªùi d·ª±a tr√™n t√†i li·ªáu t·ª´ CDC v√† WHO!  
T√¥i c≈©ng c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi ƒë∆°n gi·∫£n (b·∫±ng ti·∫øng Vi·ªát ho·∫∑c ti·∫øng Anh).  
V√≠ d·ª•:  
- C·ª• th·ªÉ: "Nguy√™n nh√¢n ch√≠nh c·ªßa s√¢u rƒÉng l√† g√¨?"  
- T√≥m t·∫Øt: "T√≥m t·∫Øt c√°c b·ªánh rƒÉng mi·ªáng ph·ªï bi·∫øn"  
- ƒê∆°n gi·∫£n: "H√¥m nay l√† th·ª© m·∫•y?", "B·∫°n l√† ai?"  
""")

# Custom CSS cho giao di·ªán
st.markdown("""
<style>
    .response-container {
        background-color: #f0f2f6;
        border-radius: 8px;
        padding: 15px;
        margin: 10px 0;
    }
    .source-container {
        background-color: #e6e9ef;
        border-radius: 5px;
        padding: 10px;
        margin-top: 5px;
    }
</style>
""", unsafe_allow_html=True)

# Kh·ªüi t·∫°o session state ƒë·ªÉ l∆∞u l·ªãch s·ª≠ chat
if "messages" not in st.session_state:
    st.session_state.messages = [
        {"role": "assistant", "content": "Ch√†o b·∫°n! H·ªèi t√¥i v·ªÅ s·ª©c kh·ªèe rƒÉng mi·ªáng ho·∫∑c c√°c c√¢u h·ªèi ƒë∆°n gi·∫£n nh√©!"}
    ]

# Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.markdown(message["content"])
        if message["role"] == "assistant" and "sources" in message:
            with st.expander("üìö Ngu·ªìn t√†i li·ªáu"):
                for source in message["sources"]:
                    st.markdown(f"- **File**: {source['file_name']} (Trang: {source.get('page', 'N/A')})")
                    st.markdown(f"  **N·ªôi dung**: {source['text']}")

# H√†m chu·∫©n h√≥a chu·ªói ƒë·ªÉ so s√°nh (lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát)
def normalize_text(text: str) -> str:
    """Chu·∫©n h√≥a chu·ªói b·∫±ng c√°ch lo·∫°i b·ªè d·∫•u ti·∫øng Vi·ªát v√† chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng."""
    text = unicodedata.normalize('NFKD', text.lower())
    text = ''.join(c for c in text if not unicodedata.combining(c))
    return text.strip()

# H√†m ki·ªÉm tra ng√¥n ng·ªØ (ti·∫øng Vi·ªát hay kh√¥ng)
def is_vietnamese(text: str) -> bool:
    """Ki·ªÉm tra xem c√¢u h·ªèi c√≥ ph·∫£i ti·∫øng Vi·ªát kh√¥ng d·ª±a tr√™n k√Ω t·ª± Unicode."""
    vietnamese_chars = set('ƒÉ√¢ƒë√™√¥∆°∆∞')
    return any(char in vietnamese_chars for char in text.lower())

# H√†m ki·ªÉm tra lo·∫°i c√¢u h·ªèi
def is_summary_query(query: str) -> bool:
    """Ki·ªÉm tra xem c√¢u h·ªèi c√≥ y√™u c·∫ßu t√≥m t·∫Øt kh√¥ng."""
    summary_keywords = ["t√≥m t·∫Øt", "tong quan", "summary", "overview"]
    return any(keyword in normalize_text(query) for keyword in summary_keywords)

def is_date_query(query: str) -> bool:
    """Ki·ªÉm tra xem c√¢u h·ªèi c√≥ h·ªèi v·ªÅ ng√†y th√°ng kh√¥ng."""
    date_keywords = [
        "hom nay", "ngay bao nhieu", "thu may", "what day", "today", "date",
        "ngay thang", "thang may", "nam nay", "ngay nao", "what is the date",
        "ngay may", "hien tai", "bay gio", "ngay hom nay", "thoi gian"
    ]
    return any(keyword in normalize_text(query) for keyword in date_keywords)

def is_simple_query(query: str) -> bool:
    """Ki·ªÉm tra xem c√¢u h·ªèi c√≥ ph·∫£i l√† c√¢u h·ªèi ƒë∆°n gi·∫£n kh√¥ng (ngo√†i ng√†y th√°ng)."""
    simple_keywords = [
        "ban la ai", "ban la ai", "ten ban", "ten ban", "ban lam gi", "ban lam gi",
        "who are you", "what can you do", "ten cua ban", "ten cua ban", "ban co the",
        "ban co the", "chao ban", "chao ban", "hello", "hi"
    ]
    normalized_query = normalize_text(query)
    return any(keyword in normalized_query for keyword in simple_keywords)

def is_dental_query(query: str) -> bool:
    """Ki·ªÉm tra xem c√¢u h·ªèi c√≥ li√™n quan ƒë·∫øn s·ª©c kh·ªèe rƒÉng mi·ªáng kh√¥ng."""
    dental_keywords = [
        "rang", "mieng", "sau rang", "nuou", "tooth", "dental", "oral", "plaque",
        "fluoride", "caries", "gum", "benh rang", "oral health", "viem nuou",
        "teeth", "gingivitis", "periodontal", "decay", "enamel", "dentist",
        "brushing", "flossing", "mouth", "sugar", "prevention"
    ]
    return any(keyword in normalize_text(query) for keyword in dental_keywords)

# H√†m tr·∫£ l·ªùi c√¢u h·ªèi v·ªÅ ng√†y th√°ng
def answer_date_query(query: str, is_vietnamese: bool) -> str:
    """Tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ ng√†y th√°ng."""
    today = datetime.now()
    day = today.day
    month = today.month
    year = today.year
    weekday = calendar.day_name[today.weekday()]
    weekday_vn = {
        "Monday": "Th·ª© Hai", "Tuesday": "Th·ª© Ba", "Wednesday": "Th·ª© T∆∞",
        "Thursday": "Th·ª© NƒÉm", "Friday": "Th·ª© S√°u", "Saturday": "Th·ª© B·∫£y",
        "Sunday": "Ch·ªß Nh·∫≠t"
    }.get(weekday, weekday)

    query_lower = normalize_text(query)
    if is_vietnamese:
        if "thu may" in query_lower or "what day" in query_lower:
            return f"H√¥m nay l√† {weekday_vn}."
        elif any(keyword in query_lower for keyword in ["ngay bao nhieu", "date", "ngay nao", "ngay may", "ngay hom nay"]):
            return f"H√¥m nay l√† ng√†y {day} th√°ng {month} nƒÉm {year}."
        elif "thang may" in query_lower:
            return f"H√¥m nay l√† th√°ng {month} nƒÉm {year}."
        elif "nam nay" in query_lower:
            return f"H√¥m nay l√† nƒÉm {year}."
        else:
            return f"H√¥m nay l√† {weekday_vn}, ng√†y {day} th√°ng {month} nƒÉm {year}."
    else:
        if "thu may" in query_lower or "what day" in query_lower:
            return f"Today is {weekday}."
        elif any(keyword in query_lower for keyword in ["ngay bao nhieu", "date", "ngay nao", "ngay may", "ngay hom nay"]):
            return f"Today is {day} {calendar.month_name[month]} {year}."
        elif "thang may" in query_lower:
            return f"It's {calendar.month_name[month]} {year}."
        elif "nam nay" in query_lower:
            return f"It's {year}."
        else:
            return f"Today is {weekday}, {day} {calendar.month_name[month]} {year}."

# H√†m tr·∫£ l·ªùi c√¢u h·ªèi ƒë∆°n gi·∫£n (ngo√†i ng√†y th√°ng)
def answer_simple_query(query: str, is_vietnamese: bool) -> str:
    """Tr·∫£ l·ªùi c√°c c√¢u h·ªèi ƒë∆°n gi·∫£n nh∆∞ 'B·∫°n l√† ai?'."""
    query_lower = normalize_text(query)
    if is_vietnamese:
        if "ban la ai" in query_lower or "ten ban" in query_lower or "ten cua ban" in query_lower:
            return "T√¥i l√† Chatbot S·ª©c Kh·ªèe RƒÉng Mi·ªáng, ƒë∆∞·ª£c t·∫°o ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ rƒÉng mi·ªáng v√† c√°c c√¢u h·ªèi ƒë∆°n gi·∫£n!"
        elif "ban lam gi" in query_lower or "ban co the" in query_lower:
            return "T√¥i c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe rƒÉng mi·ªáng d·ª±a tr√™n t√†i li·ªáu t·ª´ CDC v√† WHO, ho·∫∑c c√°c c√¢u h·ªèi ƒë∆°n gi·∫£n nh∆∞ ng√†y th√°ng, gi·ªõi thi·ªáu b·∫£n th√¢n!"
        elif "chao ban" in query_lower or "hello" in query_lower or "hi" in query_lower:
            return "Ch√†o b·∫°n! R·∫•t vui ƒë∆∞·ª£c tr√≤ chuy·ªán v·ªõi b·∫°n. H·ªèi t√¥i v·ªÅ s·ª©c kh·ªèe rƒÉng mi·ªáng nh√©!"
        else:
            return "T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? H·ªèi v·ªÅ s·ª©c kh·ªèe rƒÉng mi·ªáng ho·∫∑c c√°c c√¢u h·ªèi ƒë∆°n gi·∫£n nh√©!"
    else:
        if "who are you" in query_lower or "ten ban" in query_lower or "ten cua ban" in query_lower:
            return "I am the Oral Health Chatbot, created to answer questions about dental health and simple queries!"
        elif "what can you do" in query_lower or "ban co the" in query_lower:
            return "I can answer questions about oral health based on CDC and WHO documents, or simple queries like dates and introductions!"
        elif "chao ban" in query_lower or "hello" in query_lower or "hi" in query_lower:
            return "Hello! Nice to chat with you. Ask me about oral health!"
        else:
            return "How can I help you? Ask about oral health or simple questions!"

# Nh·∫≠p c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
if prompt := st.chat_input("H·ªèi v·ªÅ s·ª©c kh·ªèe rƒÉng mi·ªáng ho·∫∑c c√¢u h·ªèi ƒë∆°n gi·∫£n (v√≠ d·ª•: Nguy√™n nh√¢n s√¢u rƒÉng? H√¥m nay th·ª© m·∫•y? B·∫°n l√† ai?):"):
    # Th√™m c√¢u h·ªèi v√†o l·ªãch s·ª≠
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Ki·ªÉm tra ng√¥n ng·ªØ c·ªßa c√¢u h·ªèi
    is_vn = is_vietnamese(prompt)

    # X·ª≠ l√Ω c√¢u h·ªèi
    if is_date_query(prompt):
        # C√¢u h·ªèi v·ªÅ ng√†y th√°ng
        answer = answer_date_query(prompt, is_vn)
        with st.chat_message("assistant"):
            st.markdown('<div class="response-container">', unsafe_allow_html=True)
            st.markdown(f"**C√¢u tr·∫£ l·ªùi:** {answer}")
            st.markdown('</div>', unsafe_allow_html=True)
        st.session_state.messages.append({"role": "assistant", "content": answer})

    elif is_simple_query(prompt):
        # C√¢u h·ªèi ƒë∆°n gi·∫£n (ngo√†i ng√†y th√°ng)
        answer = answer_simple_query(prompt, is_vn)
        with st.chat_message("assistant"):
            st.markdown('<div class="response-container">', unsafe_allow_html=True)
            st.markdown(f"**C√¢u tr·∫£ l·ªùi:** {answer}")
            st.markdown('</div>', unsafe_allow_html=True)
        st.session_state.messages.append({"role": "assistant", "content": answer})

    elif not is_dental_query(prompt):
        # C√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn s·ª©c kh·ªèe rƒÉng mi·ªáng
        answer = "T√¥i ch·ªâ c√≥ th·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe rƒÉng mi·ªáng ho·∫∑c c√°c c√¢u h·ªèi ƒë∆°n gi·∫£n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ ch·ªß ƒë·ªÅ n√†y kh√¥ng?" if is_vn else "I can only answer questions about oral health or simple queries. Can you ask about these topics?"
        with st.chat_message("assistant"):
            st.markdown('<div class="response-container">', unsafe_allow_html=True)
            st.markdown(f"**C√¢u tr·∫£ l·ªùi:** {answer}")
            st.markdown('</div>', unsafe_allow_html=True)
        st.session_state.messages.append({"role": "assistant", "content": answer})

    else:
        # C√¢u h·ªèi v·ªÅ s·ª©c kh·ªèe rƒÉng mi·ªáng, g·ªçi API
        query = prompt
        if is_summary_query(prompt):
            query = f"T√≥m t·∫Øt: {prompt}"  # Th√™m t·ª´ kh√≥a ƒë·ªÉ API tr·∫£ v·ªÅ c√¢u tr·∫£ l·ªùi t·ªïng quan

        try:
            with st.spinner("ƒêang x·ª≠ l√Ω c√¢u h·ªèi..."):
                response = requests.post(
                    "http://localhost:5000/api/query",
                    headers={"Content-Type": "application/json"},
                    json={"query": query}
                )
                response.raise_for_status()  # B√°o l·ªói n·∫øu kh√¥ng ph·∫£i HTTP 200
                result = response.json()

            # Hi·ªÉn th·ªã c√¢u tr·∫£ l·ªùi
            answer = result["answer"].strip()
            sources = result["sources"]
            with st.chat_message("assistant"):
                st.markdown('<div class="response-container">', unsafe_allow_html=True)
                st.markdown(f"**C√¢u tr·∫£ l·ªùi:** {answer}")
                if sources:
                    with st.expander("üìö Ngu·ªìn t√†i li·ªáu"):
                        for source in sources:
                            st.markdown('<div class="source-container">', unsafe_allow_html=True)
                            st.markdown(f"- **File**: {source['file_name']} (Trang: {source.get('page', 'N/A')})")
                            st.markdown(f"  **N·ªôi dung**: {source['text']}")
                            st.markdown('</div>', unsafe_allow_html=True)
                st.markdown('</div>', unsafe_allow_html=True)

            # L∆∞u c√¢u tr·∫£ l·ªùi v√†o l·ªãch s·ª≠
            st.session_state.messages.append({
                "role": "assistant",
                "content": answer,
                "sources": sources
            })

        except requests.exceptions.RequestException as e:
            st.error(f"L·ªói khi g·ªçi API: {e}")
            st.session_state.messages.append({
                "role": "assistant",
                "content": "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω c√¢u h·ªèi. Vui l√≤ng th·ª≠ l·∫°i!" if is_vn else "An error occurred while processing your question. Please try again!"
            })